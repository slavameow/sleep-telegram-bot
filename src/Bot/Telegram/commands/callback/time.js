import CallbackCommand from '../../CallbackCommand.js';
import Database from '../../../../lib/DB/index.js';
import { logger } from '../../../../logger.js';

import { format } from '@gramio/format';
import { DateTime } from 'luxon';

function parseTimeToDate(time) {
	const [h, m] = time.split(':').map(Number);
	const now = DateTime.now().setZone('Asia/Vladivostok');

	let target = now.set({ hour: h, minute: m, second: 0, millisecond: 0 });

	if (target <= now) {
		target = target.plus({ days: 1 });
	}

	return target.toUTC().startOf('minute').toJSDate();
}

// prettier-ignore
new CallbackCommand({
	trigger: 'time',
	message_type: ['pm'],
	func: async (context, bot) => {
		try {
			const hash = context.update.callback_query.data.replace('time$', '');

			const record = await Database.name('PayloadHash').query('findUnique', {
				where: { hash }
			});

			if (!record) {
				await context.answerCbQuery('‚ùóÔ∏è –ò—Å—Ç—ë–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
			}

			const time = record.data;

			const userId = BigInt(context.from.id);
			const chatId = BigInt(context.chat.id);

			const timeInt = parseTimeToDate(time)
			const messageId = context.update.callback_query.message.message_id;

			await Database.name('Reminder').query('upsert', {
				where: { userId },
				update: { time: timeInt },
				create: { userId, time: timeInt },
			});

			await context.answerCbQuery(`‚è∞ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–¥–µ–ª–∞–ª–∏ –≤—ã–±–æ—Ä!`);

			const messageText = format`
                <b>üåü –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!</b> –í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è: <i>${time}</i>. –≠—Ç–æ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–ø–æ–∫–æ–π–Ω–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏–ª—ã. üí§\n
                –ë–æ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç –≤–∞–º –æ–± —ç—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –ª–µ—á—å —Å–ø–∞—Ç—å –≤–æ–≤—Ä–µ–º—è –∏ –ø—Ä–æ—Å–Ω—É—Ç—å—Å—è –±–æ–¥—Ä—ã–º –∏ –ø–æ–ª–Ω—ã–º —ç–Ω–µ—Ä–≥–∏–∏! üöÄ\n
                <b>–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ</b>, —á—Ç–æ —Ö–æ—Ä–æ—à–∏–π —Å–æ–Ω ‚Äî –∑–∞–ª–æ–≥ –∑–¥–æ—Ä–æ–≤—å—è –∏ –æ—Ç–ª–∏—á–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è! üòä
            `;

			return bot.instance.telegram.editMessageText(
				chatId.toString(),
				messageId,
				null,
				messageText,
				{ parse_mode: 'HTML', disable_notification: true }
			);
		} catch (error) {
			logger.error(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏: ${error.message}`);
			await context.answerCbQuery(`‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.`);
		}
	},
	source: 'bot',
});
