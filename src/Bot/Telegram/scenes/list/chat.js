import Database from '../../../../lib/DB/index.js';
import { logger } from '../../../../logger.js';
import { format } from '@gramio/format';

import { Markup, Scenes } from 'telegraf';
import { Mistral } from '@mistralai/mistralai';

const mistral = new Mistral({
	apiKey: Database.config.telegram.ai.token,
});

const cancel = Markup.button.callback('üè† –û—Ç–º–µ–Ω–∞', 'cancel');
const keyboard = Markup.inlineKeyboard([cancel]);

const Chat = new Scenes.BaseScene('chat');

// prettier-ignore
Chat.enter(async (context) => {
	context.session.history = [
		{
			role: 'system',
			content: `
–¢—ã ‚Äî Telegram-–±–æ—Ç-–ø—Å–∏—Ö–æ–ª–æ–≥ –ø–æ —Å–Ω—É.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º —É–ª—É—á—à–∞—Ç—å —Å–æ–Ω –∏ –ø–æ–Ω–∏–º–∞—Ç—å —Å–Ω—ã.
–¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–º—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ —Å–Ω–æ–º –∏ —Å–Ω–æ–≤–∏–¥–µ–Ω–∏—è–º–∏.

üí° –ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å:
–î–∞—ë—à—å –∫–æ—Ä–æ—Ç–∫–∏–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –∑–∞—Å—ã–ø–∞–Ω–∏—é, –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—é, —Ä–µ–∂–∏–º—É —Å–Ω–∞, —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—é –∏ –≤—ã—Å—ã–ø–∞–Ω–∏—é.

–ü–æ–º–æ–≥–∞–µ—à—å –ø—Ä–∏ –±–µ—Å—Å–æ–Ω–Ω–∏—Ü–µ, –Ω–æ—á–Ω—ã—Ö –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è—Ö, —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º.

–¢–æ–ª–∫—É–µ—à—å —Å–Ω—ã (–µ—Å–ª–∏ —Ç–µ–±—è —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç) ‚Äî —á–µ—Ä–µ–∑ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—é, —Å–∏–º–≤–æ–ª–∏–∫—É –∏–ª–∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –æ–±—Ä–∞–∑—ã.

–û–±—ä—è—Å–Ω—è–µ—à—å, —á—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —Å–æ–Ω, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–∏—Å—ã–≤–∞–µ—Ç –µ–≥–æ.

‚úÖ –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —è–≤–Ω–æ –æ —Å–Ω–µ/—Å–Ω–æ–≤–∏–¥–µ–Ω–∏—è—Ö:
–û—Ç–≤–µ—á–∞–π —Ç–µ–ø–ª–æ, –ø–æ–Ω—è—Ç–Ω–æ –∏ –∫—Ä–∞—Ç–∫–æ.
–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã, –Ω–µ –ø–∏—à–∏ ¬´–ø—Ä–æ—Å—Ç—ã–Ω—å¬ª ‚Äî 2‚Äì4 –∫–æ—Ä–æ—Ç–∫–∏—Ö –∞–±–∑–∞—Ü–∞ –º–∞–∫—Å–∏–º—É–º.

üîÑ –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–µ, –Ω–µ—è—Å–Ω–æ–µ –∏–ª–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞:
–ü—ã—Ç–∞–π—Å—è –¥–æ–≥–∞–¥–∞—Ç—å—Å—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é, –∫–∞—Å–∞–µ—Ç—Å—è –ª–∏ –≤–æ–ø—Ä–æ—Å —Å–Ω–∞.
–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ ¬´–î–∞¬ª, ¬´–ê–≥–∞¬ª, ¬´–ö–æ–Ω–µ—á–Ω–æ¬ª ‚Äî —ç—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–π –ø–æ —Ç–µ–º–µ. –ù–µ –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–π.

‚ùì –ï—Å–ª–∏ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ, –æ —á—ë–º –≤–æ–ø—Ä–æ—Å:
–í–µ–∂–ª–∏–≤–æ —É—Ç–æ—á–Ω–∏:

¬´–ú–æ–∂–µ—à—å —É—Ç–æ—á–Ω–∏—Ç—å, —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è —Å–Ω–∞ –∏–ª–∏ —Å–Ω–æ–≤?¬ª

‚ùå –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ —Å–≤—è–∑–∞–Ω —Å–æ —Å–Ω–æ–º –∏ —Å–Ω–æ–≤–∏–¥–µ–Ω–∏—è–º–∏:
–í–µ–∂–ª–∏–≤–æ –æ—Ç–∫–∞–∂–∏—Å—å:

¬´–Ø –º–æ–≥—É –≥–æ–≤–æ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–º—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ —Å–Ω–æ–º –∏ —Å–Ω–æ–≤–∏–¥–µ–Ω–∏—è–º–∏. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É —Å —ç—Ç–∏–º!¬ª

ü§ñ –ü—Ä–∏–º–µ—Ä –ª–æ–≥–∏–∫–∏ –æ—Ç–≤–µ—Ç–∞:
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ¬´–ö —á–µ–º—É —Å–Ω–∏—Ç—Å—è –ª–µ—Å—Ç–Ω–∏—Ü–∞?¬ª
–ë–æ—Ç: ¬´–õ–µ—Å—Ç–Ω–∏—Ü–∞ –≤–æ —Å–Ω–µ —á–∞—Å—Ç–æ —Å–∏–º–≤–æ–ª–∏–∑–∏—Ä—É–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ ‚Äî –≤–≤–µ—Ä—Ö –∏–ª–∏ –≤–Ω–∏–∑ –ø–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–º—É –ø—É—Ç–∏. –ï—Å–ª–∏ —Ç—ã –ø–æ–¥–Ω–∏–º–∞–µ—à—å—Å—è, —ç—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å —Ä–æ—Å—Ç –∏–ª–∏ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π. –ê —Å–ø—É—Å–∫ ‚Äî —É—Å—Ç–∞–ª–æ—Å—Ç—å –∏–ª–∏ —à–∞–≥ –Ω–∞–∑–∞–¥.¬ª
			`.trim()
		}
	];


    await context.reply(format`
        üí§ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º-–ø—Å–∏—Ö–æ–ª–æ–≥–æ–º —Å–Ω–∞!</b>\n
        –ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ —Å–Ω–µ: –∫–∞–∫ —É—Å–Ω—É—Ç—å, –∫–æ–≥–¥–∞ –ª–æ–∂–∏—Ç—å—Å—è, –∫–∞–∫ –≤—ã—Å—ã–ø–∞—Ç—å—Å—è –∏ –≤—Å—ë, —á—Ç–æ —Ç–µ–±—è –≤–æ–ª–Ω—É–µ—Ç.\n
        –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª ‚Äî –Ω–∞–∂–º–∏ "–û—Ç–º–µ–Ω–∞".`,
        { reply_markup: keyboard.reply_markup, parse_mode: 'HTML', disable_notification: true }
    );
});

const cooldown = new Map();

Chat.on('message', async (context) => {
	const userId = context.from.id;

	const now = Date.now();
	const time = 8000;

	const lastTime = cooldown.get(userId);

	if (lastTime && now - lastTime < time) {
		const secondsLeft = Math.ceil((time - (now - lastTime)) / 1000);

		// prettier-ignore
		return context.reply(`‚è≥ –ü–æ–¥–æ–∂–¥–∏ ${secondsLeft} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º.`);
	}

	const text = context.message.text;

	if (!text) {
		return context.reply(`üéØ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ —Å–Ω–µ.`);
	}

	cooldown.set(userId, now);

	// prettier-ignore
	try {
		const message = await context.reply('üí≠ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, —è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...');

		context.session.history.push({
			role: 'user',
			content: text
		});

		// –û–≥—Ä–∞–Ω–∏—á–∏–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ 20 —Å–æ–æ–±—â–µ–Ω–∏–π + system)
		if (context.session.history.length > 22) {
			context.session.history = [
				context.session.history[0],
				...context.session.history.slice(-21)
			];
		}

		const answer = await generateAnswer(context.session.history);
		cooldown.set(userId, now);

		context.session.history.push({
			role: 'assistant',
			content: answer
		});

		await context.deleteMessage(message.message_id);

		await context.reply(MarkdownV2(bold(answer)), { 
			reply_markup: keyboard.reply_markup,
			parse_mode: 'MarkdownV2' 
		});
	} catch (error) {
		logger.error(error);
		return context.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`);
	}
});

Chat.action('cancel', async (context) => {
	await context.editMessageText('üç™ –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.');
	return context.scene.leave();
});
function bold(text) {
	return text.replace(/\*\*(.+?)\*\*/g, '*$1*');
}

function MarkdownV2(text) {
	return text.replace(/[_\[\]()~`>#+=|{}.!\\-]/g, '\\$&');
}

async function generateAnswer(history) {
	const response = await mistral.chat.complete({
		model: 'mistral-large-latest',
		temperature: 0.9,
		top_p: 0.95,
		messages: history,
	});

	console.log(response.choices[0].message);

	return response.choices[0].message.content;
}

export default Chat;
